Id like the server to manager a hierarchical world of objects.   The first type of object will be a PlayerCharacter.  A PlayerCharacter is assigned to a Guest account by default onConnection, and takes on the same name as the Guest accounts name. Other than a name, all objects will have an objectId generated from a generateRandomId function, and a parent. The World object will have a parent of null.  For now just place all PlayerCharacters inside the World object. Changes to any object are broadcast to all clients.  The entire state of the World hierarchy is initially sent to the client onConnect.  Changes to Object state are persisted to disk at time of change to a path that mimics the hierarcy of the objects.  i.e. 'data/object-${objectId}-${name}/object-${objectId}-${name}'.  Each object directory will contain a properties.json file that holds the objects properties represented by the current directory.

The ObjectManager needs to load all Objects at start up.   Instead of always creating a new PlayerCharacter during onConnect, ObjectManager needs a resolvePlayerCharacter method that takes an account and the accounts accountId to either find an existing PlayerCharacter or create a new one when the accountId is not found to be associated with any existing PlayerCharacter.

The directory structure for persistence of Objects should be deeply nested sub-directories of sub-directories that mimics the hierarchy of the World.  Instead of being able to load and save individual Objects to disk, the entire World hierarchy has to be descended in order to load.   Individual object saves are possible, but have to construct the full hierarchy path from the root object down to the current object being saved to know what its location on disk is.
